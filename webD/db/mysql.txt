NEW KEYWORDS{

    ORM{
        object relational mapping;

        we generally use ORM tools to write sql codes in oops format;
        we don't usually write raw sql codes;

        eg. sequelize for javascript, sqlAlchemy for python, etc.
    }
}

NOTES{

    can use drawsql.app for making chart;
    read this blog : https://xpromx.me/blog/database-table-and-column-naming-converntions
}

MySQL{

    about{

        relational database;
        structured query language;
        it helps in performing different operations on the relational data present in database;

        sequel database;
        requires a Schema which have proper rules defined for its data;
        scaled vertically;
        writing data is easy while fetching will take some time;

        good for database with many relationships like shopping Carts, Contacts, Networks;

        no duplicate data is present (bad practice) unlike in NoSQL databases;
    }

    authentication{

        mysql v8 (the version installed in my pc) supports multiple authentication methods for accessing the db;
        by default caching_sha2_password method is used in v8 (due to this sudden change many previous modules and tools are having problem in connecting to db);
        earlier mysql_native_password was used (for f*cking 24 years);

        //for changing the authentication method to previous on
        //code in mysql interface
        ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '<password>'; 
    }
    
    Datatypes{

        a coloumn of variable data have a datatype defined for it;
        eg. int, float, varchar, text, datatime, etc.;
    }
    
    Constraint{

        a coloumn may have constraint defined for their data;
        eg. unique, not null, primary key, enum, etc. 

        VARCHAR(<max. number of characters to be used (max 255)>)        //when using varchar data type we need to specify this
    }

    other key-points{

        by convention we write keywords in UPPER CASE but its not compulsary;
        eg. create, table, select, where, etc;
        AUTO_INCREMENT -> used with id generally to automatically increment and give id no. to id field;
    }

    codes{

        //command line

        mysql --version
        mysql -u <username> -p      //then enter your password to access mysql cmd line interface (its a 4 digit password)

        open services.msc for starting and stopping different services;

        show variables like "max_connections";
        show status where `variable_name` = 'Threads_connected';
        show processlist;
        set global max_connections = 200;       //resets when server is restarted

        //inside mysql command line interface
        //these are called statements

        show databases;                     //using colon at the end is must
        create database <db name>;
        use <db name>;
        show tables;
        -- <comment>;    // we can use '-- ' to write comments in sql;

        CREATE TABLE <tabel name>(<variable1 name> <variable1 data type> <constraint11> <constraint1N>, <variableN> <variableN data type> <constraitN1> <constraintNN>);            //creating table with its schema

        INSERT INTO <table name>(<varialbes to be inserted seperated by comma>) VALUES (<data seperated by comma and in the order variables was written previously in this command>);       //inserts one row of data in table 

        SELECT * FROM <table name>;         //for reading all the data of a table

        eg.
        //for creating a table
        CREATE TABLE Users(id INT PRIMARY KEY AUTO_INCREMENT, email VARCHAR(255) NOT NULL UNIQUE,bio TEXT, country VARCHAR(2));

        //for inserting one row of data in table 
        INSERT INTO Users (email, bio, country) VALUES ('abc@gmail.com', 'demo data', 'IN');

        //for inserting multiple row of data in one go
        INSERT INTO Users (email, bio, country) VALUES ('abcd@gmail.com', 'demo data2', 'IN'),('abcde@gmail.com', 'demo data3', 'IN'); 

        //for reading data of the table
        SELECT * FROM Users;

        //see further examples in .sql file

        





        //inside vscode client to write with proper format
        //we can write these object like statements in one line in mysql command line interface 
        
        
        -- @block       // this helps in creating a block of code that can be run seperately (its a property of vscode client(sql tools) no mysql)

        eg.
        CREATE TABLE Users(
            id INT PRIMARY KEY AUTO_INCREMENT, 
            email VARCHAR(255) NOT NULL UNIQUE,
            bio TEXT, 
            country VARCHAR(2)
        );

        INSERT INTO Users (email, bio, country)         -- order of variables to insert is important 
        VALUES (                                        -- not inserting id as we set it to auto-increment
            'abc@gmail.com',
            'just a demo data for helping the developer to understand this',
            'IN'
        );

        INSERT INTO Users (email, bio, country)
        VALUES (
                "abcd@gmail.com",
                "another demo data",
                'IN'
            ),
            (
                'abcde@gmail.com',
                'one more',
                'IN'
            );

    }
}

{
    /////// common commands
    {   
        //for creating backup table
        CREATE TABLE new_table AS SELECT * FROM original_table;

        // creating views
        CREATE VIEW view_name AS
        SELECT column1, column2, ...
        FROM table_name
        WHERE condition; 

        //for deleting table 
        DROP TABLE table_name;

        //for updating table
        UPDATE table_name
        SET column1 = value1, column2 = value2, ...
        WHERE condition;

        //for deleting database
        DROP DATABASE db_name;
    }

    ////// group by
    returns one record for each group
    aggregiate functions can't be used without a group by clause
    we print only attribute and data using aggregiate functions that are only associated with the group by element  
    https://youtu.be/jk6_L0k8VPg


    ////// having 
    we can't use aggregiate function with the where clause so we use having clause to use aggregiate functions
    eg. print only coloumbs satisfying some condition like having a quantity smaller than some quantity

    /////// Joins 
    check queries in 100.54 script

    ////// using loops and variables

    /////// adding string to variable
    https://youtu.be/3SdK511aK54

    ////// using cases (if/else)
    https://youtu.be/mf_IFI3I7to
}

